pod.ip=0.0.0.0
%dev.pod.ip=0.0.0.0
%test.pod.ip=0.0.0.0
%dev.quarkus.http.port=8080

kafka-streams.default.deserialization.exception.handler=org.apache.kafka.streams.errors.LogAndContinueExceptionHandler
kafka-streams.replication.factor=-1
# Compression type, should be used as default to keep message sizes small as possible
kafka-streams.compression.type=gzip

KAFKA_VEHICLE_ORDER_TOPIC=bmw.cloudadoption.VehicleMockOrder.v1
quarkus.kafka-streams.bootstrap-servers=localhost:9092
quarkus.kafka-streams.application-id=bmw.cloud.vehiclemockorderproducer-java
quarkus.kafka-streams.application-server=${pod.ip}:${quarkus.http.port}
quarkus.kafka-streams.topics=${KAFKA_VEHICLE_ORDER_TOPIC}

kafka.bootstrap.servers=localhost:9092
%dev.kafka.bootstrap.servers=localhost:9092

quarkus.http.access-log.enabled=true

## Individual sinks
mp.messaging.outgoing.kafka.connector=smallrye-kafka
mp.messaging.outgoing.kafka.value.serializer=io.quarkus.kafka.client.serialization.JsonbSerializer
mp.messaging.outgoing.kafka.retries=3

mp.messaging.outgoing.kafka-empty.connector=smallrye-kafka
mp.messaging.outgoing.kafka-empty.value.serializer=com.bmw.cloudadoption.vehicleorder.control.serdes.AllToNullSerializer
mp.messaging.outgoing.kafka-empty.retries=3
